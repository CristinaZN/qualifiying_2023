//! Rohde & Schwarz Engineering Competition 2023
//!
//! This is the code to speed up. Enjoy!

#pragma once

#include "ec2023/ec2023.h"
#include <iostream>
#include <iomanip>
#include <vector>

static constexpr float OVERLAP_RATIO = 0.75;
static constexpr size_t WINDOW_SIZE = 1024;

size_t opt_num = 32;
size_t cos_opt_num = 4;
static constexpr size_t WINDOW_SIZE_2 = 1024 * 1024;
static constexpr float log_10_window_size_2 = 6.02059991327962f;
static constexpr float log_10_4 = 0.6020599913279623f;
void compute_fourier_transform(const std::vector<ec::Float>& input, std::vector<ec::Float>& outputReal, std::vector<ec::Float>& outputImag);


std::vector<ec::Float> valueVector(ec::Float number, size_t size){
  std::vector<ec::Float> *rlt = new std::vector<ec::Float>(size,number);
  return *rlt;
}

std::vector<ec::Float> process_signal(const std::vector<ec::Float>& inputSignal)
{  

  const size_t numSamples = inputSignal.size();
  const size_t sizeSpectrum = (WINDOW_SIZE / 2) + 1;
  const size_t vecHW_block_size_32 = sizeSpectrum / 32 + 1; // vecHW calculation, 32 elements per block

  const size_t stepBetweenWins = static_cast<size_t>(ceil(WINDOW_SIZE * (1 - OVERLAP_RATIO)));
  const size_t numWins = (numSamples - WINDOW_SIZE) / stepBetweenWins + 1;
  const ec::Float PI = 3.14159265358979323846f;

  // after reformulation of the expression, these params are used directly
    const float log_10_bias = 3.0f - log_10_window_size_2 + log_10_4;
    const float log_10_bias_times_10 = 10.0f * log_10_bias;
    const float log_10_bias_for_HT = 3.0f - log_10_window_size_2;
    const float log_10_bias_for_HT_times_10 = log_10_bias_for_HT * 10.0f;

  std::vector<ec::Float> signalWindow(WINDOW_SIZE);
  std::vector<ec::Float> signalFreqReal(WINDOW_SIZE);
  std::vector<ec::Float> signalFreqImag(WINDOW_SIZE);
  std::vector<ec::Float> spectrumWindow(sizeSpectrum);


  std::vector<ec::Float> outputSpectrum(sizeSpectrum, std::numeric_limits<float>::lowest());
    ec::VecHw& hwInputSingal= *ec::VecHw::getSingletonVecHw();
    hwInputSingal.copyToHw(inputSignal,0,inputSignal.size(),0);
  size_t idxStartWin = 0;

  size_t step = WINDOW_SIZE;


    // Initilize a vector I = [0 , 1 , 2 , 3, ...., WINDOW_SIZE - 1]
    std::vector<ec::Float> vecI(WINDOW_SIZE*4,0);
    for(size_t i = 0 ; i < WINDOW_SIZE; i++){
        vecI[i] = i;}
    // Initialize a vector A = [a, a, ..., a]
    ec::Float constant = 2.0f * PI / (WINDOW_SIZE -1);//这一步应该没必要用vechw？
    std::vector<ec::Float> vecA = valueVector(constant,WINDOW_SIZE);

    ec::VecHw& hwI = *ec::VecHw::getSingletonVecHw();
    hwI.resetMemTo0(0,WINDOW_SIZE*4);
    // hwI = [vecI, vecA, 0, 0]
    hwI.copyToHw(vecI,0,WINDOW_SIZE,0);
    hwI.copyToHw(vecA,0,WINDOW_SIZE,WINDOW_SIZE);
    // compute (ec::Float(I) * 2.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vecI, result, 0, 0]
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.mul32(i*opt_num,WINDOW_SIZE+i*opt_num,WINDOW_SIZE+i*opt_num,opt_num);
    }
    // compute cos(ec::Float(I) * 2.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vecI, result, 0, 0]
    for (size_t i = 0; i < WINDOW_SIZE / cos_opt_num; i++){
        hwI.cos4(WINDOW_SIZE+i*cos_opt_num,WINDOW_SIZE+i*cos_opt_num,cos_opt_num);
    }
    // compute - 0.5f * ec_cos(ec::Float(I) * 2.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vector(-0.5), result, 0, 0]
    constant = -0.5f;
    vecA = valueVector(constant,WINDOW_SIZE);
    hwI.copyToHw(vecA,0,WINDOW_SIZE,0);
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.mul32(i*opt_num,WINDOW_SIZE+i*opt_num,WINDOW_SIZE+i*opt_num,opt_num);
    }
    // hwI.mul32(0,WINDOW_SIZE,WINDOW_SIZE,WINDOW_SIZE);
    // compute 0.42f - 0.5f * ec_cos(ec::Float(I) * 2.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vector(0.42), result, 0, 0]
    constant = 0.42f;
    vecA = valueVector(constant,WINDOW_SIZE);
    hwI.copyToHw(vecA,0,WINDOW_SIZE,0);
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.add32(i*opt_num,WINDOW_SIZE+i*opt_num,WINDOW_SIZE+i*opt_num,opt_num);
    }
    // hwI.add32(0,WINDOW_SIZE,WINDOW_SIZE,WINDOW_SIZE);
    // hwI = [vector(0.42), result1, 0, result1]
    // result1 = 0.42f - 0.5f * ec_cos(ec::Float(I) * 2.0f * PI / (WINDOW_SIZE - 1))
    for (size_t i = 0 ; i< WINDOW_SIZE / opt_num; i++){
        hwI.assign32(WINDOW_SIZE+i*opt_num,WINDOW_SIZE*3 + i * opt_num, opt_num);
    }
    // hwI.assign32(WINDOW_SIZE,WINDOW_SIZE*3,WINDOW_SIZE);


    constant = 4.0f * PI / (WINDOW_SIZE -1);
    vecA = valueVector(constant,WINDOW_SIZE);
    // hwI = [vecI,vecA,0,result1]
    hwI.copyToHw(vecI,0,WINDOW_SIZE,0);
    hwI.copyToHw(vecA,0,WINDOW_SIZE,WINDOW_SIZE);
    //compute (ec::Float(I) * 4.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vecI,result(vecI.*vecA),0,result1]
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.mul32(i*opt_num,WINDOW_SIZE+i*opt_num,WINDOW_SIZE+i*opt_num,opt_num);
    }
    // hwI.mul32(0,WINDOW_SIZE,WINDOW_SIZE,WINDOW_SIZE);
    //compute cos(ec::Float(I) * 4.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    // hwI = [vecI,result(cos(vecI*vecA)),0,result1]
    for (size_t i = 0; i < WINDOW_SIZE / cos_opt_num; i++){
        hwI.cos4(WINDOW_SIZE+i*cos_opt_num,WINDOW_SIZE+i*cos_opt_num,cos_opt_num);
    }
    // hwI.cos4(WINDOW_SIZE,WINDOW_SIZE,WINDOW_SIZE);
    //compute 0.08f * ec_cos(ec::Float(I) * 4.0f * PI / (WINDOW_SIZE - 1)), copy to hwI[WinSize+1:2*WinSize]
    constant = 0.08f;
    vecA = valueVector(constant,WINDOW_SIZE);
    hwI.copyToHw(vecA,0,WINDOW_SIZE,0);
    // hwI = [vector(0.08),result(0.08*cos(vecI*vecA)),0,result1]
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.mul32(i*opt_num,WINDOW_SIZE+i*opt_num,WINDOW_SIZE+i*opt_num,opt_num);
    }
    // hwI.mul32(0,WINDOW_SIZE,WINDOW_SIZE,WINDOW_SIZE);
    // compute blackmanWinCoef + 0.08f * ec_cos(ec::Float(I) * 4.0f * PI / (WINDOW_SIZE - 1));
    // hwI = [final_result,result(0.08*cos(vecI*vecA)),0,result1]
    // final_result = result1 + 0.08f * ec_cos(ec::Float(I) * 4.0f * PI / (WINDOW_SIZE - 1))
    for (size_t i = 0; i < WINDOW_SIZE / opt_num; i++){
        hwI.add32(WINDOW_SIZE + i * opt_num,WINDOW_SIZE * 3 + i * opt_num,i*opt_num,opt_num);
    }


  for (size_t J = 0; J < numWins; J++)
  {


    // hwI = [final_result,signalWindow[idxStartWin:idxStartWin+WinSize-1],0,result1]
    hwI.copyToHw(inputSignal,idxStartWin,WINDOW_SIZE,WINDOW_SIZE);
    // hwI = [final_result,signalWindow[idxStartWin:idxStartWin+WinSize-1],result,result1]
    for(size_t i = 0 ; i < WINDOW_SIZE/opt_num ; i++) {
        hwI.mul32(i * opt_num, WINDOW_SIZE + i * opt_num, WINDOW_SIZE * 2 + i * opt_num, opt_num);
    }




    hwI.copyFromHw(signalWindow,WINDOW_SIZE*2,WINDOW_SIZE,0);

    compute_fourier_transform(signalWindow, signalFreqReal, signalFreqImag);

    int memory_used = WINDOW_SIZE;


    ec::VecHw &vecHW2 = *ec::VecHw::getSingletonVecHw();
    // vecHW2.resetMemTo0();

    int used_index = WINDOW_SIZE; // used for counting index

    int signalFreqReal_index[2]; // store the index of Sig_Re in HW_mem
    vecHW2.copyToHw(signalFreqReal, 0, sizeSpectrum, used_index);
    signalFreqReal_index[0] = used_index;
    used_index += sizeSpectrum;
    signalFreqReal_index[1] = used_index;

    int signalFreqImag_index[2];  // store the index of Sig_Im in HW_mem
    vecHW2.copyToHw(signalFreqImag, 0, sizeSpectrum, used_index);
    signalFreqImag_index[0] = used_index;
    used_index += sizeSpectrum;
    signalFreqImag_index[1] = used_index;


    int signalFreqReal_square_index[2]; // store the index of Sig_Re^2 in HW_mem
    for (int mul_index = 0; mul_index < sizeSpectrum; mul_index += 32)
    {
      // find signalFreqReal[i] * signalFreqReal[i]
      vecHW2.mul32(signalFreqReal_index[0] + mul_index, signalFreqReal_index[0] + mul_index, used_index + mul_index);
    }
    signalFreqReal_square_index[0] = used_index;
    used_index += vecHW_block_size_32 * 32;
    signalFreqReal_square_index[1] = used_index;

    int signalFreqImag_square_index[2]; // store the index of Sig_Im^2 in HW_mem
    for (int mul_index = 0; mul_index < sizeSpectrum; mul_index += 32)
    {
      // find signalFreqImag[i] * signalFreqImag[i]
      vecHW2.mul32(signalFreqImag_index[0] + mul_index, signalFreqImag_index[0] + mul_index, used_index + mul_index);
    }


    signalFreqImag_square_index[0] = used_index;
    used_index += vecHW_block_size_32 * 32;
    signalFreqImag_square_index[1] = used_index;

    int freqVal_vec_index[2]; // store the index of freqVal in HW_mem
    for (int add_index = 0; add_index < sizeSpectrum; add_index += 32)
    {
      vecHW2.add32(signalFreqReal_square_index[0] + add_index, signalFreqImag_square_index[0] + add_index, used_index+add_index);
    }
      freqVal_vec_index[0] = used_index;
      used_index += vecHW_block_size_32 * 32;
      freqVal_vec_index[1] = used_index;



    std::vector<ec::Float> freqVal_vec(sizeSpectrum, ec::Float(0));
    vecHW2.copyFromHw(freqVal_vec, freqVal_vec_index[0], sizeSpectrum, 0);

    // Head and Tail is not mul_by_2
      size_t i = 0; // i = 0
      freqVal_vec[0] = 10.0f * ec::ec_log10(freqVal_vec[0]) + log_10_bias_for_HT_times_10;
      outputSpectrum[0] = ec::ec_max(outputSpectrum[0], freqVal_vec[0]);

      i = sizeSpectrum - 1; // i = 512
      freqVal_vec[512] = 10.0f * ec::ec_log10(freqVal_vec[512]) + log_10_bias_for_HT_times_10;
      outputSpectrum[512] = ec::ec_max(outputSpectrum[512], freqVal_vec[512]);


    // cancel square_root and square
    for (i = 1; i < sizeSpectrum-1; i++)
    {
        freqVal_vec[i] = log_10_bias_times_10 + 10 * ec::ec_log10(freqVal_vec[i]);
        outputSpectrum[i] = ec::ec_max(outputSpectrum[i], freqVal_vec[i]);
    }


    idxStartWin += stepBetweenWins;

  }

  return outputSpectrum;
}

ec::Float Wn_m_re[WINDOW_SIZE/2] = {
  1.0f, 0.9999811752826011f, 0.9999247018391445f, 0.9998305817958234f, 0.9996988186962042f, 0.9995294175010931f, 0.9993223845883495f, 0.9990777277526454f, 0.9987954562051724f, 0.9984755805732948f, 0.9981181129001492f, 0.9977230666441916f, 0.9972904566786902f, 0.9968202992911657f, 0.996312612182778f, 0.9957674144676598f, 0.9951847266721969f, 0.9945645707342554f, 0.9939069700023561f, 0.9932119492347945f, 0.99247953459871f, 0.9917097536690995f, 0.99090263542778f, 0.9900582102622971f, 0.989176509964781f, 0.9882575677307495f, 0.9873014181578584f, 0.9863080972445987f, 0.9852776423889412f, 0.984210092386929f, 0.9831054874312163f, 0.9819638691095552f, 0.9807852804032304f, 0.9795697656854405f, 0.9783173707196277f, 0.9770281426577544f, 0.9757021300385286f, 0.9743393827855759f, 0.9729399522055602f, 0.9715038909862518f, 0.970031253194544f, 0.9685220942744174f, 0.9669764710448521f, 0.9653944416976894f, 0.9637760657954398f, 0.9621214042690416f, 0.9604305194155658f, 0.9587034748958716f, 0.9569403357322088f, 0.9551411683057708f, 0.9533060403541939f, 0.9514350209690083f, 0.9495281805930367f, 0.9475855910177411f, 0.9456073253805213f, 0.9435934581619604f, 0.9415440651830208f, 0.9394592236021899f, 0.937339011912575f, 0.9351835099389476f, 0.932992798834739f, 0.9307669610789837f, 0.9285060804732156f, 0.9262102421383114f, 0.9238795325112867f, 0.9215140393420419f, 0.9191138516900578f, 0.9166790599210427f, 0.9142097557035307f, 0.9117060320054299f, 0.9091679830905224f, 0.9065957045149153f, 0.9039892931234433f, 0.901348847046022f, 0.8986744656939538f, 0.8959662497561852f, 0.8932243011955153f, 0.8904487232447579f, 0.8876396204028539f, 0.8847970984309378f, 0.881921264348355f, 0.8790122264286335f, 0.8760700941954066f, 0.8730949784182901f, 0.8700869911087115f, 0.8670462455156926f, 0.8639728561215867f, 0.8608669386377673f, 0.8577286100002721f, 0.8545579883654005f, 0.8513551931052652f, 0.8481203448032972f, 0.8448535652497071f, 0.8415549774368984f, 0.8382247055548381f, 0.83486287498638f, 0.8314696123025452f, 0.8280450452577558f, 0.8245893027850253f, 0.8211025149911046f, 0.8175848131515837f, 0.8140363297059484f, 0.8104571982525948f, 0.8068475535437993f, 0.8032075314806449f, 0.799537269107905f, 0.7958369046088836f, 0.7921065773002124f, 0.7883464276266062f, 0.7845565971555752f, 0.7807372285720945f, 0.7768884656732324f, 0.773010453362737f, 0.7691033376455797f, 0.765167265622459f, 0.7612023854842618f, 0.7572088465064846f, 0.7531867990436125f, 0.7491363945234594f, 0.745057785441466f, 0.7409511253549592f, 0.7368165688773698f, 0.7326542716724128f, 0.7284643904482252f, 0.724247082951467f, 0.7200025079613817f, 0.7157308252838187f, 0.7114321957452164f, 0.7071067811865476f, 0.7027547444572253f, 0.6983762494089729f, 0.693971460889654f, 0.6895405447370669f, 0.6850836677727004f, 0.680600997795453f, 0.676092703575316f, 0.6715589548470183f, 0.6669999223036375f, 0.6624157775901718f, 0.6578066932970787f, 0.6531728429537769f, 0.6485144010221126f, 0.6438315428897915f, 0.6391244448637757f, 0.6343932841636455f, 0.6296382389149271f, 0.6248594881423865f, 0.6200572117632892f, 0.6152315905806268f, 0.6103828062763095f, 0.6055110414043255f, 0.600616479383869f, 0.5956993044924335f, 0.5907597018588743f, 0.5857978574564389f, 0.5808139580957645f, 0.5758081914178453f, 0.5707807458869674f, 0.5657318107836132f, 0.560661576197336f, 0.5555702330196023f, 0.5504579729366048f, 0.5453249884220465f, 0.540171472729893f, 0.5349976198870973f, 0.5298036246862948f, 0.5245896826784688f, 0.5193559901655895f, 0.5141027441932217f, 0.508830142543107f, 0.5035383837257176f, 0.49822766697278187f, 0.4928981922297841f, 0.48755016014843605f, 0.48218377207912283f, 0.47679923006332225f, 0.4713967368259978f, 0.4659764957679661f, 0.46053871095824f, 0.45508358712634384f, 0.4496113296546066f, 0.44412214457042926f, 0.4386162385385277f, 0.433093818853152f, 0.4275550934302822f, 0.4220002707997998f, 0.4164295600976373f, 0.4108431710579039f, 0.40524131400498986f, 0.3996241998456468f, 0.3939920400610481f, 0.3883450466988263f, 0.38268343236508984f, 0.3770074102164183f, 0.3713171939518376f, 0.36561299780477396f, 0.3598950365349883f, 0.3541635254204905f, 0.3484186802494345f, 0.3426607173119944f, 0.33688985339222005f, 0.33110630575987643f, 0.325310292162263f, 0.31950203081601575f, 0.3136817403988916f, 0.307849640041535f, 0.3020059493192282f, 0.29615088824362396f, 0.29028467725446233f, 0.2844075372112718f, 0.27851968938505306f, 0.272621355449949f, 0.2667127574748984f, 0.26079411791527557f, 0.2548656596045146f, 0.24892760574572026f, 0.24298017990326398f, 0.23702360599436734f, 0.23105810828067128f, 0.22508391135979278f, 0.21910124015686977f, 0.21311031991609136f, 0.20711137619221856f, 0.20110463484209196f, 0.19509032201612833f, 0.18906866414980628f, 0.18303988795514106f, 0.17700422041214886f, 0.17096188876030136f, 0.1649131204899701f, 0.1588581433338614f, 0.1527971852584434f, 0.14673047445536175f, 0.14065823933284924f, 0.13458070850712622f, 0.12849811079379322f, 0.12241067519921628f, 0.11631863091190488f, 0.11022220729388318f, 0.10412163387205473f, 0.09801714032956077f, 0.0919089564971327f, 0.08579731234443988f, 0.07968243797143013f, 0.07356456359966745f, 0.0674439195636641f, 0.06132073630220865f, 0.05519524434969003f, 0.049067674327418126f, 0.04293825693494096f, 0.03680722294135899f, 0.03067480317663658f, 0.024541228522912264f, 0.01840672990580482f, 0.012271538285719944f, 0.006135884649154515f, 6.123233995736766e-17f, -0.006135884649154393f, -0.012271538285719823f, -0.018406729905804695f, -0.024541228522912142f, -0.03067480317663646f, -0.036807222941358866f, -0.042938256934940834f, -0.04906767432741801f, -0.05519524434968991f, -0.06132073630220853f, -0.06744391956366398f, -0.07356456359966733f, -0.07968243797143001f, -0.08579731234443976f, -0.09190895649713257f, -0.09801714032956065f, -0.1041216338720546f, -0.11022220729388306f, -0.11631863091190475f, -0.12241067519921615f, -0.1284981107937931f, -0.1345807085071261f, -0.14065823933284913f, -0.14673047445536164f, -0.1527971852584433f, -0.15885814333386128f, -0.16491312048996995f, -0.17096188876030124f, -0.17700422041214875f, -0.18303988795514092f, -0.18906866414980616f, -0.1950903220161282f, -0.20110463484209182f, -0.20711137619221845f, -0.21311031991609125f, -0.21910124015686966f, -0.22508391135979267f, -0.23105810828067114f, -0.23702360599436723f, -0.24298017990326387f, -0.24892760574572012f, -0.2548656596045145f, -0.26079411791527546f, -0.2667127574748983f, -0.27262135544994887f, -0.27851968938505295f, -0.2844075372112717f, -0.29028467725446216f, -0.29615088824362384f, -0.3020059493192281f, -0.30784964004153487f, -0.3136817403988914f, -0.31950203081601564f, -0.32531029216226287f, -0.3311063057598763f, -0.33688985339221994f, -0.34266071731199427f, -0.3484186802494344f, -0.3541635254204904f, -0.35989503653498817f, -0.36561299780477385f, -0.3713171939518375f, -0.3770074102164182f, -0.3826834323650897f, -0.3883450466988262f, -0.393992040061048f, -0.3996241998456467f, -0.40524131400498975f, -0.4108431710579038f, -0.416429560097637f, -0.4220002707997997f, -0.42755509343028186f, -0.4330938188531519f, -0.4386162385385274f, -0.44412214457042914f, -0.4496113296546067f, -0.4550835871263437f, -0.46053871095824006f, -0.465976495767966f, -0.4713967368259977f, -0.4767992300633219f, -0.4821837720791227f, -0.4875501601484357f, -0.492898192229784f, -0.4982276669727816f, -0.5035383837257175f, -0.5088301425431071f, -0.5141027441932216f, -0.5193559901655896f, -0.5245896826784687f, -0.5298036246862947f, -0.534997619887097f, -0.5401714727298929f, -0.5453249884220462f, -0.5504579729366047f, -0.555570233019602f, -0.5606615761973359f, -0.5657318107836132f, -0.5707807458869671f, -0.5758081914178453f, -0.5808139580957644f, -0.5857978574564389f, -0.590759701858874f, -0.5956993044924334f, -0.6006164793838688f, -0.6055110414043254f, -0.6103828062763096f, -0.6152315905806267f, -0.6200572117632892f, -0.6248594881423862f, -0.6296382389149271f, -0.6343932841636454f, -0.6391244448637757f, -0.6438315428897913f, -0.6485144010221124f, -0.6531728429537765f, -0.6578066932970785f, -0.6624157775901719f, -0.6669999223036374f, -0.6715589548470184f, -0.6760927035753158f, -0.680600997795453f, -0.6850836677727002f, -0.6895405447370669f, -0.6939714608896538f, -0.6983762494089728f, -0.7027547444572251f, -0.7071067811865475f, -0.7114321957452165f, -0.7157308252838186f, -0.7200025079613817f, -0.7242470829514668f, -0.7284643904482252f, -0.7326542716724127f, -0.7368165688773698f, -0.7409511253549589f, -0.745057785441466f, -0.7491363945234591f, -0.7531867990436124f, -0.7572088465064847f, -0.7612023854842617f, -0.765167265622459f, -0.7691033376455795f, -0.773010453362737f, -0.7768884656732323f, -0.7807372285720945f, -0.784556597155575f, -0.7883464276266062f, -0.7921065773002122f, -0.7958369046088835f, -0.7995372691079051f, -0.8032075314806448f, -0.8068475535437993f, -0.8104571982525947f, -0.8140363297059484f, -0.8175848131515836f, -0.8211025149911046f, -0.8245893027850251f, -0.8280450452577557f, -0.8314696123025453f, -0.83486287498638f, -0.8382247055548381f, -0.8415549774368983f, -0.8448535652497071f, -0.8481203448032971f, -0.8513551931052652f, -0.8545579883654004f, -0.857728610000272f, -0.8608669386377672f, -0.8639728561215867f, -0.8670462455156926f, -0.8700869911087113f, -0.8730949784182901f, -0.8760700941954065f, -0.8790122264286335f, -0.8819212643483549f, -0.8847970984309378f, -0.8876396204028538f, -0.8904487232447579f, -0.8932243011955152f, -0.8959662497561851f, -0.8986744656939539f, -0.9013488470460219f, -0.9039892931234433f, -0.9065957045149153f, -0.9091679830905224f, -0.9117060320054298f, -0.9142097557035307f, -0.9166790599210426f, -0.9191138516900578f, -0.9215140393420418f, -0.9238795325112867f, -0.9262102421383114f, -0.9285060804732155f, -0.9307669610789837f, -0.9329927988347388f, -0.9351835099389476f, -0.9373390119125748f, -0.9394592236021899f, -0.9415440651830207f, -0.9435934581619604f, -0.9456073253805212f, -0.9475855910177411f, -0.9495281805930367f, -0.9514350209690083f, -0.9533060403541939f, -0.9551411683057707f, -0.9569403357322088f, -0.9587034748958715f, -0.9604305194155658f, -0.9621214042690415f, -0.9637760657954398f, -0.9653944416976893f, -0.9669764710448521f, -0.9685220942744174f, -0.970031253194544f, -0.9715038909862518f, -0.9729399522055601f, -0.9743393827855759f, -0.9757021300385285f, -0.9770281426577544f, -0.9783173707196275f, -0.9795697656854405f, -0.9807852804032304f, -0.9819638691095552f, -0.9831054874312163f, -0.984210092386929f, -0.9852776423889412f, -0.9863080972445986f, -0.9873014181578584f, -0.9882575677307495f, -0.989176509964781f, -0.990058210262297f, -0.99090263542778f, -0.9917097536690995f, -0.99247953459871f, -0.9932119492347945f, -0.9939069700023561f, -0.9945645707342554f, -0.9951847266721968f, -0.9957674144676598f, -0.996312612182778f, -0.9968202992911657f, -0.9972904566786902f, -0.9977230666441916f, -0.9981181129001492f, -0.9984755805732948f, -0.9987954562051724f, -0.9990777277526454f, -0.9993223845883495f, -0.9995294175010931f, -0.9996988186962042f, -0.9998305817958234f, -0.9999247018391445f, -0.9999811752826011f
};

ec::Float Wn_m_im[WINDOW_SIZE/2] = {
  -0.0f, -0.006135884649154475f, -0.012271538285719925f, -0.01840672990580482f, -0.024541228522912288f, -0.030674803176636626f, -0.03680722294135883f, -0.04293825693494082f, -0.049067674327418015f, -0.055195244349689934f, -0.06132073630220858f, -0.06744391956366405f, -0.07356456359966743f, -0.07968243797143013f, -0.0857973123444399f, -0.09190895649713272f, -0.0980171403295606f, -0.10412163387205459f, -0.11022220729388306f, -0.11631863091190475f, -0.1224106751992162f, -0.12849811079379317f, -0.13458070850712617f, -0.1406582393328492f, -0.14673047445536175f, -0.15279718525844344f, -0.15885814333386145f, -0.1649131204899699f, -0.17096188876030122f, -0.17700422041214875f, -0.18303988795514095f, -0.1890686641498062f, -0.19509032201612825f, -0.2011046348420919f, -0.20711137619221856f, -0.21311031991609136f, -0.2191012401568698f, -0.22508391135979283f, -0.2310581082806711f, -0.2370236059943672f, -0.24298017990326387f, -0.24892760574572015f, -0.25486565960451457f, -0.2607941179152755f, -0.26671275747489837f, -0.272621355449949f, -0.27851968938505306f, -0.2844075372112719f, -0.29028467725446233f, -0.2961508882436238f, -0.3020059493192281f, -0.30784964004153487f, -0.3136817403988915f, -0.3195020308160157f, -0.3253102921622629f, -0.33110630575987643f, -0.33688985339222005f, -0.3426607173119944f, -0.34841868024943456f, -0.35416352542049034f, -0.3598950365349881f, -0.36561299780477385f, -0.37131719395183754f, -0.37700741021641826f, -0.3826834323650898f, -0.38834504669882625f, -0.3939920400610481f, -0.3996241998456468f, -0.40524131400498986f, -0.4108431710579039f, -0.41642956009763715f, -0.4220002707997997f, -0.4275550934302821f, -0.43309381885315196f, -0.43861623853852766f, -0.4441221445704292f, -0.44961132965460654f, -0.45508358712634384f, -0.46053871095824f, -0.4659764957679662f, -0.47139673682599764f, -0.4767992300633221f, -0.4821837720791227f, -0.487550160148436f, -0.49289819222978404f, -0.4982276669727818f, -0.5035383837257176f, -0.508830142543107f, -0.5141027441932217f, -0.5193559901655896f, -0.524589682678469f, -0.5298036246862946f, -0.5349976198870972f, -0.5401714727298929f, -0.5453249884220465f, -0.5504579729366048f, -0.5555702330196022f, -0.560661576197336f, -0.5657318107836131f, -0.5707807458869673f, -0.5758081914178453f, -0.5808139580957645f, -0.5857978574564389f, -0.5907597018588742f, -0.5956993044924334f, -0.600616479383869f, -0.6055110414043255f, -0.6103828062763095f, -0.6152315905806268f, -0.6200572117632891f, -0.6248594881423863f, -0.629638238914927f, -0.6343932841636455f, -0.6391244448637757f, -0.6438315428897914f, -0.6485144010221124f, -0.6531728429537768f, -0.6578066932970786f, -0.6624157775901718f, -0.6669999223036375f, -0.6715589548470183f, -0.6760927035753159f, -0.680600997795453f, -0.6850836677727004f, -0.6895405447370668f, -0.6939714608896539f, -0.6983762494089728f, -0.7027547444572253f, -0.7071067811865476f, -0.7114321957452164f, -0.7157308252838186f, -0.7200025079613817f, -0.7242470829514669f, -0.7284643904482252f, -0.7326542716724128f, -0.7368165688773698f, -0.7409511253549591f, -0.745057785441466f, -0.7491363945234593f, -0.7531867990436125f, -0.7572088465064846f, -0.7612023854842618f, -0.765167265622459f, -0.7691033376455796f, -0.7730104533627369f, -0.7768884656732324f, -0.7807372285720945f, -0.7845565971555752f, -0.7883464276266062f, -0.7921065773002123f, -0.7958369046088835f, -0.799537269107905f, -0.8032075314806448f, -0.8068475535437992f, -0.8104571982525948f, -0.8140363297059483f, -0.8175848131515837f, -0.8211025149911046f, -0.8245893027850253f, -0.8280450452577558f, -0.8314696123025452f, -0.83486287498638f, -0.838224705554838f, -0.8415549774368983f, -0.844853565249707f, -0.8481203448032971f, -0.8513551931052652f, -0.8545579883654005f, -0.8577286100002721f, -0.8608669386377673f, -0.8639728561215867f, -0.8670462455156926f, -0.8700869911087113f, -0.8730949784182901f, -0.8760700941954066f, -0.8790122264286334f, -0.8819212643483549f, -0.8847970984309378f, -0.8876396204028539f, -0.8904487232447579f, -0.8932243011955153f, -0.8959662497561851f, -0.8986744656939538f, -0.901348847046022f, -0.9039892931234433f, -0.9065957045149153f, -0.9091679830905223f, -0.9117060320054299f, -0.9142097557035307f, -0.9166790599210427f, -0.9191138516900578f, -0.9215140393420419f, -0.9238795325112867f, -0.9262102421383113f, -0.9285060804732156f, -0.9307669610789837f, -0.9329927988347388f, -0.9351835099389475f, -0.937339011912575f, -0.9394592236021899f, -0.9415440651830208f, -0.9435934581619604f, -0.9456073253805213f, -0.9475855910177411f, -0.9495281805930367f, -0.9514350209690083f, -0.9533060403541938f, -0.9551411683057707f, -0.9569403357322089f, -0.9587034748958716f, -0.9604305194155658f, -0.9621214042690416f, -0.9637760657954398f, -0.9653944416976894f, -0.9669764710448521f, -0.9685220942744173f, -0.970031253194544f, -0.9715038909862518f, -0.9729399522055601f, -0.9743393827855759f, -0.9757021300385286f, -0.9770281426577544f, -0.9783173707196277f, -0.9795697656854405f, -0.9807852804032304f, -0.9819638691095552f, -0.9831054874312163f, -0.984210092386929f, -0.9852776423889412f, -0.9863080972445987f, -0.9873014181578584f, -0.9882575677307495f, -0.989176509964781f, -0.9900582102622971f, -0.99090263542778f, -0.9917097536690995f, -0.99247953459871f, -0.9932119492347945f, -0.9939069700023561f, -0.9945645707342554f, -0.9951847266721968f, -0.9957674144676598f, -0.996312612182778f, -0.9968202992911657f, -0.9972904566786902f, -0.9977230666441916f, -0.9981181129001492f, -0.9984755805732948f, -0.9987954562051724f, -0.9990777277526454f, -0.9993223845883495f, -0.9995294175010931f, -0.9996988186962042f, -0.9998305817958234f, -0.9999247018391445f, -0.9999811752826011f, -1.0f, -0.9999811752826011f, -0.9999247018391445f, -0.9998305817958234f, -0.9996988186962042f, -0.9995294175010931f, -0.9993223845883495f, -0.9990777277526454f, -0.9987954562051724f, -0.9984755805732948f, -0.9981181129001492f, -0.9977230666441916f, -0.9972904566786902f, -0.9968202992911658f, -0.996312612182778f, -0.9957674144676598f, -0.9951847266721969f, -0.9945645707342554f, -0.9939069700023561f, -0.9932119492347945f, -0.99247953459871f, -0.9917097536690995f, -0.99090263542778f, -0.9900582102622971f, -0.989176509964781f, -0.9882575677307495f, -0.9873014181578584f, -0.9863080972445987f, -0.9852776423889412f, -0.984210092386929f, -0.9831054874312163f, -0.9819638691095552f, -0.9807852804032304f, -0.9795697656854405f, -0.9783173707196277f, -0.9770281426577544f, -0.9757021300385286f, -0.9743393827855759f, -0.9729399522055602f, -0.9715038909862518f, -0.970031253194544f, -0.9685220942744174f, -0.9669764710448521f, -0.9653944416976894f, -0.9637760657954398f, -0.9621214042690416f, -0.9604305194155659f, -0.9587034748958716f, -0.9569403357322089f, -0.9551411683057707f, -0.9533060403541939f, -0.9514350209690083f, -0.9495281805930367f, -0.9475855910177412f, -0.9456073253805214f, -0.9435934581619604f, -0.9415440651830208f, -0.9394592236021899f, -0.937339011912575f, -0.9351835099389476f, -0.9329927988347388f, -0.9307669610789837f, -0.9285060804732156f, -0.9262102421383114f, -0.9238795325112867f, -0.921514039342042f, -0.9191138516900578f, -0.9166790599210427f, -0.9142097557035307f, -0.9117060320054299f, -0.9091679830905225f, -0.9065957045149153f, -0.9039892931234434f, -0.901348847046022f, -0.8986744656939539f, -0.8959662497561852f, -0.8932243011955152f, -0.890448723244758f, -0.8876396204028539f, -0.8847970984309379f, -0.881921264348355f, -0.8790122264286335f, -0.8760700941954066f, -0.8730949784182902f, -0.8700869911087115f, -0.8670462455156928f, -0.8639728561215868f, -0.8608669386377672f, -0.8577286100002721f, -0.8545579883654005f, -0.8513551931052652f, -0.8481203448032972f, -0.8448535652497072f, -0.8415549774368984f, -0.8382247055548382f, -0.8348628749863801f, -0.8314696123025453f, -0.8280450452577558f, -0.8245893027850252f, -0.8211025149911048f, -0.8175848131515837f, -0.8140363297059485f, -0.8104571982525948f, -0.8068475535437994f, -0.8032075314806449f, -0.7995372691079052f, -0.7958369046088836f, -0.7921065773002123f, -0.7883464276266063f, -0.7845565971555751f, -0.7807372285720946f, -0.7768884656732324f, -0.7730104533627371f, -0.7691033376455796f, -0.7651672656224591f, -0.7612023854842619f, -0.7572088465064847f, -0.7531867990436125f, -0.7491363945234593f, -0.7450577854414661f, -0.740951125354959f, -0.73681656887737f, -0.7326542716724128f, -0.7284643904482253f, -0.7242470829514669f, -0.7200025079613818f, -0.7157308252838187f, -0.7114321957452167f, -0.7071067811865476f, -0.7027547444572252f, -0.6983762494089729f, -0.6939714608896539f, -0.689540544737067f, -0.6850836677727004f, -0.6806009977954532f, -0.6760927035753159f, -0.6715589548470186f, -0.6669999223036376f, -0.662415777590172f, -0.6578066932970787f, -0.6531728429537766f, -0.6485144010221126f, -0.6438315428897914f, -0.6391244448637758f, -0.6343932841636455f, -0.6296382389149272f, -0.6248594881423863f, -0.6200572117632894f, -0.6152315905806269f, -0.6103828062763097f, -0.6055110414043257f, -0.6006164793838689f, -0.5956993044924335f, -0.5907597018588742f, -0.585797857456439f, -0.5808139580957645f, -0.5758081914178454f, -0.5707807458869673f, -0.5657318107836135f, -0.5606615761973361f, -0.5555702330196022f, -0.5504579729366049f, -0.5453249884220464f, -0.540171472729893f, -0.5349976198870972f, -0.5298036246862948f, -0.524589682678469f, -0.5193559901655898f, -0.5141027441932218f, -0.5088301425431073f, -0.5035383837257176f, -0.49822766697278176f, -0.49289819222978415f, -0.4875501601484359f, -0.4821837720791229f, -0.4767992300633221f, -0.4713967368259978f, -0.4659764957679662f, -0.4605387109582402f, -0.4550835871263439f, -0.4496113296546069f, -0.4441221445704293f, -0.43861623853852755f, -0.43309381885315207f, -0.42755509343028203f, -0.42200027079979985f, -0.41642956009763715f, -0.41084317105790413f, -0.4052413140049899f, -0.39962419984564707f, -0.39399204006104815f, -0.3883450466988266f, -0.3826834323650899f, -0.37700741021641815f, -0.3713171939518377f, -0.3656129978047738f, -0.35989503653498833f, -0.3541635254204904f, -0.3484186802494348f, -0.34266071731199443f, -0.33688985339222033f, -0.3311063057598765f, -0.32531029216226326f, -0.3195020308160158f, -0.3136817403988914f, -0.30784964004153503f, -0.30200594931922803f, -0.296150888243624f, -0.2902846772544624f, -0.2844075372112721f, -0.27851968938505317f, -0.27262135544994925f, -0.2667127574748985f, -0.26079411791527585f, -0.2548656596045147f, -0.2489276057457201f, -0.24298017990326407f, -0.23702360599436717f, -0.23105810828067133f, -0.22508391135979283f, -0.21910124015687005f, -0.21311031991609142f, -0.20711137619221884f, -0.201104634842092f, -0.1950903220161286f, -0.18906866414980636f, -0.1830398879551409f, -0.17700422041214894f, -0.17096188876030122f, -0.16491312048997014f, -0.15885814333386147f, -0.15279718525844369f, -0.1467304744553618f, -0.14065823933284954f, -0.13458070850712628f, -0.12849811079379309f, -0.12241067519921635f, -0.11631863091190471f, -0.11022220729388324f, -0.10412163387205457f, -0.09801714032956083f, -0.09190895649713275f, -0.08579731234444016f, -0.0796824379714302f, -0.07356456359966773f, -0.06744391956366418f, -0.06132073630220849f, -0.055195244349690094f, -0.049067674327417966f, -0.04293825693494102f, -0.03680722294135883f, -0.030674803176636865f, -0.024541228522912326f, -0.0184067299058051f, -0.012271538285720007f, -0.006135884649154799f
};



void compute_fourier_transform(const std::vector<ec::Float> &input, std::vector<ec::Float> &outputReal, std::vector<ec::Float> &outputImag)
{
  const ec::Float PI = 3.14159265358979323846f;

  size_t inputSize = input.size();

  outputReal.clear();
  outputReal.resize(inputSize, 0.0f);
  outputImag.clear();
  outputImag.resize(inputSize, 0.0f);

  for (size_t I = 0; I < inputSize; ++I)
  {
    for (size_t J = 0; J < inputSize; ++J)
    {
      const ec::Float angleTerm = (-2.0f * PI) * ec::Float(I) * J * (1.0f / ec::Float(inputSize));

      outputReal[I] += input[J] * ec_cos(angleTerm);
      outputImag[I] += input[J] * ec_sin(angleTerm);
    }
  }

  return;
}
